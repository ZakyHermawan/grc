{% macro indent(code) %}
{{ '    ' + code | replace('\n', '\n    ') }}
{% endmacro %}
{% macro doubleindent(code) %}
{{ code | replace('\n', '\n        ') }}
{% endmacro %}
#ifndef {{ flow_graph.get_option('id').upper() }}_HPP
#define {{ flow_graph.get_option('id').upper() }}_HPP
/********************
GNU Radio C++ Flow Graph Header File

Title: {{ title }}
{% if flow_graph.get_option('author') %}
Author: {{ flow_graph.get_option('author') }}
{% endif %}
{% if flow_graph.get_option('description') %}
Description: {{ flow_graph.get_option('description') }}
{% endif %}
GNU Radio version: {{ config.version }}
********************/

/********************
** Create includes
********************/
{% for inc in includes %}
{{ inc }}
{% endfor %}

#include <QVBoxLayout>
#include <QScrollArea>
#include <QWidget>
#include <QGridLayout>
#include <QSettings>
#include <QApplication>
#include <QCloseEvent>

{% if parameters %}
#include <boost/program_options.hpp>
{% endif %}

using namespace gr;

{% set class_name = flow_graph.get_option('id') + ('_' if flow_graph.get_option('id') == 'top_block' else '') %}
{% set parts = [] %}
{% for param in parameters %}
    {% set _ = parts.append('{} {}'.format(param.vtype, param.name)) %}
{% endfor %}
{% set param_str = ', '.join(parts) %}

class {{ class_name }} : public QWidget {
    Q_OBJECT

private:
    QVBoxLayout *top_scroll_layout;
    QScrollArea *top_scroll;
    QWidget *top_widget;
    QVBoxLayout *top_layout;
    QGridLayout *top_grid_layout;
    QSettings *settings;
    void closeEvent(QCloseEvent *event);

{% for block, make, declarations in blocks %}
{% if declarations %}
{{ indent(declarations) }}
{% endif %}
{% endfor %}

{% if parameters %}
// Parameters:
{% for param in parameters %}
    {{ param.vtype }} {{ param.cpp_templates.render('var_make') }}
{% endfor %}
{% endif %}

{% if variables %}
// Variables:
{% for var in variables %}
    {{ var.vtype }} {{ var.cpp_templates.render('var_make') }}
{% endfor %}
{% endif %}

public:
    top_block_sptr tb;
    {{ class_name }}({{ param_str }});
    ~{{ class_name }}();

{% for var in parameters + variables %}
    {{ var.vtype }} get_{{ var.name }} () const;
    void set_{{ var.name }}({{ var.vtype }} {{ var.name }});
{% endfor %}

};

#endif
