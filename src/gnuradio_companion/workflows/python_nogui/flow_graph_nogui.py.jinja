#!/usr/bin/env python3
# -*- coding: utf-8 -*-
{% macro indent(code) -%}
{{ code | replace('\n', '\n        ') }}
{% endmacro %}
#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: {{ title }}
{% if flow_graph.get_option('author') %}
# Author: {{ flow_graph.get_option('author') }}
{% endif %}
{% if flow_graph.get_option('copyright') %}
# Copyright: {{ flow_graph.get_option('copyright') }}
{% endif %}
{% if flow_graph.get_option('description') %}
# Description: {{ flow_graph.get_option('description') }}
{% endif %}
# GNU Radio version: {{ version }}

{#
########################################################
## Create Imports
########################################################
#}
{% for imp in imports %}
{{ imp }}
{% endfor %}
{#
########################################################
## Prepare snippets
########################################################
#}
{% for snip in flow_graph.get_snippets_dict() %}
{{ indent(snip['def']) }}
{% for line in snip['lines'] %}
    {{ indent(line) }}
{% endfor %}
{% endfor %}

{% set snippet_sections = ['main_after_init', 'main_after_start', 'main_after_stop', 'init_before_blocks'] %}
{% set snippets = {} %}
{% for section in snippet_sections %}
    {% set snippets = snippets.update({section: flow_graph.get_snippets_dict(section)}) %}
{% endfor %}

{% for section in snippet_sections %}
{% if snippets[section] %}
def snippets_{{ section }}(tb):
    {% for snip in snippets[section] %}
    {{ indent(snip['call']) }}
    {% endfor %}
{% endif %}
{% endfor %}
{#
########################################################
## Create Class
##  Write the class declaration for a top or hier block.
##  The parameter names are the arguments to __init__.
##  Setup the IO signature (hier block only).
########################################################
#}
{% set class_name = flow_graph.get_option('id') %}
{% set parts = ['self'] %}
{% for param in parameters %}
    {% set _ = parts.append('{}={}'.format(param.name, param.templates.render('make'))) %}
{% endfor %}
{% set param_str = ', '.join(parts) %}
class {{ class_name }}(gr.top_block):
    def __init__({{ param_str }}):
        gr.top_block.__init__(self, "{{ title }}", catch_exceptions={{ catch_exceptions }})
{% if flow_graph.get_option('thread_safe_setters') %}
        self._lock = threading.RLock()
{% endif %}
        self.flowgraph_started = threading.Event()
{#
########################################################
## Create Parameters
##  Set the parameter to a property of self.
########################################################
#}
{% if parameters %}
        ##################################################
        # Parameters
        ##################################################
{% endif %}

{% for param in parameters %}
        {{ indent(param.get_var_make()) }}
{% endfor %}
{#
########################################################
## Create Variables
########################################################
#}
{% if variables %}
        ##################################################
        # Variables
        ##################################################
{% endif %}
{% for var in variables %}
        {{ indent(var.templates.render('var_make')) }}
{% endfor %}
{% if blocks %}
        ##################################################
        # Blocks
        ##################################################
{% endif %}
{{ 'snippets_init_before_blocks(self)' if snippets['init_before_blocks'] else '' }}
{% for blk, blk_make in blocks %}
{% if blk_make %}
        {{ indent(blk_make.strip('\n')) }}
{% endif %}
{% if 'alias' in blk.params and blk.params['alias'].get_evaluated() %}
        self.{{ blk.name }}.set_block_alias("{{ blk.params['alias'].get_evaluated() }}")
{% endif %}
{% if 'affinity' in blk.params and blk.params['affinity'].get_evaluated() %}
        self.{{ blk.name }}.set_processor_affinity({{ blk.params['affinity'].to_code() }})
{% endif %}
{% if blk.sources | length > 0 and 'minoutbuf' in blk.params and blk.params['minoutbuf'].get_evaluated()|int > 0 %}
        self.{{ blk.name }}.set_min_output_buffer({{ blk.params['minoutbuf'].to_code() }})
{% endif %}
{% if blk.sources | length > 0 and 'maxoutbuf' in blk.params and blk.params['maxoutbuf'].get_evaluated()|int > 0 %}
        self.{{ blk.name }}.set_max_output_buffer({{ blk.params['maxoutbuf'].to_code() }})
{% endif %}
{% endfor %}
{% if connections %}
        ##################################################
        # Connections
        ##################################################
{% for connection in connections %}
        {{ indent(connection.rstrip()) }}
{%- endfor %}
{% endif %}

{#
########################################################
## QT sink close method reimplementation
########################################################
#}
{#
##
##
##
## Create Callbacks
## Write a set method for this variable that calls the callbacks
########################################################
#}
{% for var in parameters + variables %}

    def get_{{ var.name }}(self):
        return self.{{ var.name }}

    def set_{{ var.name }}(self, {{ var.name }}):
        {% if flow_graph.get_option('thread_safe_setters') %}
        with self._lock:
            self.{{ var.name }} = {{ var.name }}
            {% for callback in callbacks[var.name] %}
            {{ callback | indent }}
            {% endfor %}
        {% else %}
        self.{{ var.name }} = {{ var.name }}
        {% for callback in callbacks[var.name] %}
        {{ callback | indent }}
        {% endfor %}
        {% endif %}
{% endfor %}
{#
########################################################
## Create Main
##  For top block code, generate a main routine.
##  Instantiate the top block and run as gui or cli.
########################################################
#}
{% set params_eq_list = [] %}
{% if parameters %}

{% set arg_parser_args = '' %}
def argument_parser():
    {% if flow_graph.get_option('description') %}
    {% set arg_parser_args = 'description=description' %}
    description = {{ flow_graph.get_option('description') | repr }}
    {% endif %}
    parser = ArgumentParser({{ arg_parser_args }})
    {% for param in parameters %}
    {% set switches = ['"--{}"'.format(param.name.replace('_', '-'))] %}
    {% set short_id = param.params['short_id'].get_value() %}
    {% if short_id %}
    {% set _ = switches.insert(0, '"-{}"'.format(short_id)) %}
    {% endif %}

    {% set type_ = param.params['type'].get_value() %}
    {% if type_ %}
    {% set _ = params_eq_list.append('{}=options.{}'.format(param.name, param.name)) %}
    {% endif %}

    {% set default = param.templates.render('make') %}
    {% if type_ == 'eng_float' %}
    {% set default = "eng_notation.num_to_str(float(" + default + "))" %}
    {% elif type_ == 'string' %}
    {% set type_ = 'str' %}
    {% endif %}
    {% if type_ %}
    parser.add_argument(
        {{ switches | join(', ') }}, dest="{{ param.name }}", type={{ type_ }}, default={{ default }},
        help="Set {{ param.params['label'].get_evaluated() or param.name }} [default=%(default)r]")
    {% endif %}
    {% endfor %}
    return parser
{% endif %}

def main(top_block_cls={{ class_name }}, options=None):
    {% if parameters %}
    if options is None:
        options = argument_parser().parse_args()
    {% endif %}
    {% if flow_graph.get_option('realtime_scheduling') %}
    if gr.enable_realtime_scheduling() != gr.RT_OK:
        gr.logger("realtime").warn("Error: failed to enable real-time scheduling.")
    {% endif %}
    tb = top_block_cls({{ params_eq_list | join(', ') }})
    {% if snippets['main_after_init'] %}
    snippets_main_after_init('tb')
    {% endif %}
    def sig_handler(sig=None, frame=None):
        {% for m in monitors %}
        {% if m.params['en'].get_value() == 'True' %}
        tb.{{ m.name }}.stop()
        {% endif %}
        {% endfor %}
        tb.stop()
        tb.wait()
        {% if snippets['main_after_stop'] %}
        snippets_main_after_stop('tb')
        {% endif %}
        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    {% if flow_graph.get_option('run_options') == 'prompt' %}
    tb.start({{ flow_graph.get_option('max_nouts') or '' }})
    tb.flowgraph_started.set()
    {% if snippets['main_after_start'] %}
    snippets_main_after_start('tb')
    {% endif %}
    {% for m in monitors %}
    {% if m.params['en'].get_value() == 'True' %}
    tb.{{ m.name }}.start()
    {% endif %}
    {% endfor %}
    try:
        input('Press Enter to quit: ')
    except EOFError:
        pass
    tb.stop()
    {% elif flow_graph.get_option('run_options') == 'run' %}
    tb.start({{ flow_graph.get_option('max_nouts') or '' }})
    tb.flowgraph_started.set()
    {% if snippets['main_after_start'] %}
    snippets_main_after_start('tb')
    {% endif %}
    {% for m in monitors %}
    {% if m.params['en'].get_value() == 'True' %}
    tb.{{ m.name }}.start()
    {% endif %}
    {% endfor %}
    {% endif %}
    tb.wait()
    {% if snippets['main_after_stop'] %}
    snippets_main_after_stop('tb')
    {% endif %}
    {% for m in monitors %}
    {% if m.params['en'].get_value() == 'True' %}
    tb.{{ m.name }}.stop()
    {% endif %}
    {% endfor %}

if __name__ == '__main__':
    main()
