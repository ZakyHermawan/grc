{% macro doubleindent(code) %}
{{ code | replace('\n', '\n        ') }}
{% endmacro %}

/********************
GNU Radio C++ Flow Graph Source File

Title: {{ title }}
{% if flow_graph.get_option('author') %}
Author: {{ flow_graph.get_option('author') }}
{% endif %}
{% if flow_graph.get_option('description') %}
Description: {{ flow_graph.get_option('description') }}
{% endif %}
GNU Radio version: {{ config.version }}
********************/

#include "{{ flow_graph.get_option('id') }}.hpp"
{% if flow_graph.get_option('realtime_scheduling') %}
#include <gnuradio/realtime.h>
{% endif %}

{% if parameters %}
namespace po = boost::program_options;
{% endif %}
using namespace gr;

{% set class_name = flow_graph.get_option('id') + ('_' if flow_graph.get_option('id') == 'top_block' else '') %}
{% set parts = [] %}
{% for param in parameters %}
    {% set _ = parts.append('{} {}'.format(param.vtype, param.name)) %}
{% endfor %}
{% set param_str = ', '.join(parts) %}

{% set param_str_without_types = parameters | map(attribute='name') | join(', ') %}
{% set initializer_str = parameters | map('join', '(', ')') | join(',\n  ') %}


{% if initializer_str %}
{% set initializer_str = '\n: ' + initializer_str %}
{% endif %}

{{ class_name }}::{{ class_name }} ({{ param_str }}) {{ initializer_str }} {

{% if flow_graph.get_option('thread_safe_setters') %}
## self._lock = threading.RLock()
{% endif %}
    this->tb = gr::make_top_block("{{ title }}");

{% if blocks %}
{% for blk, blk_make, declarations in blocks %}
        {{ doubleindent(blk_make) }}
{% endfor %}
{% endif %}

{% if connections %}
{% for connection in connections %}
    {{ connection.rstrip() }};
{% endfor %}
{% endif %}
}

{{ class_name }}::~{{ class_name }} () {
}

// Callbacks:
{% for var in parameters + variables %}
{{ var.vtype }} {{ class_name }}::get_{{ var.name }} () const {
    return this->{{ var.name }};
}


void {{ class_name }}::set_{{ var.name }} ({{ var.vtype }} {{ var.name }}) {
{% if flow_graph.get_option('thread_safe_setters') %}
    ## with self._lock:
    return;
{% else %}
    this->{{ var.name }} = {{ var.name }};
    {% for callback in callbacks[var.name] %}
    {{ callback }};
    {% endfor %}
{% endif %}
}

{% endfor %}

int main (int argc, char **argv) {
    {% if parameters %}
    {% for parameter in parameters %}
    {{ parameter.vtype }} {{ parameter.name }} = {{ parameter.cpp_templates.render('make') }};
    {% endfor %}

    po::options_description desc("Options");
    desc.add_options()
    ("help", "display help")
    {% for parameter in parameters %}
    ("{{ parameter.name }}", po::value<{{ parameter.vtype }}>(&{{ parameter.name }}), "{{ parameter.label }}")
    {% endfor %}
    ;

    po::variables_map vm;
    po::store(po::parse_command_line(argc, argv, desc), vm);
    po::notify(vm);

    if (vm.count("help")) {
        std::cout << desc << std::endl;
        return 0;
    }
    {% endif %}
    {% if flow_graph.get_option('realtime_scheduling') %}
    if (enable_realtime_scheduling() != RT_OK) {
        std::cout << "Error: failed to enable real-time scheduling." << std::endl;
    }
    {% endif %}

    {{ class_name }}* top_block = new {{ class_name }}({{ param_str_without_types }});
    {# TODO: params #}
    {% if flow_graph.get_option('run_options') == 'prompt' %}
    top_block->tb->start();
    {% for m in monitors %}
    (top_block->{{ m.name }}).start();
    {% endfor %}
    std::cout << "Press Enter to quit: ";
    std::cin.ignore();
    top_block->tb->stop();
    {% elif flow_graph.get_option('run_options') == 'run' %}
    top_block->tb->start();
    {% endif %}
    {% for m in monitors %}
    (top_block->{{ m.name }}).start();
    {% endfor %}
    top_block->tb->wait();

    return 0;
}
